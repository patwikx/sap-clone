// =================================================================
// COMPLETE ENTERPRISE ERP SCHEMA
// Hotel & Restaurant Management System
// =================================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================================================================
// ENUMS - Better type safety
// =================================================================
enum DocStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  OPEN
  CLOSED
  CANCELLED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum BookingStatus {
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
  NO_SHOW
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  OUT_OF_ORDER
  MAINTENANCE
}

enum HousekeepingStatus {
  CLEAN
  DIRTY
  INSPECT
  OUT_OF_ORDER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PartnerType {
  CUSTOMER
  SUPPLIER
  GUEST
  LEAD
  EMPLOYEE
}

// =================================================================
// CORE SYSTEM MODELS
// =================================================================
model BusinessUnit {
  id   String @id @default(cuid())
  name String
  code String @unique

  // Relationships
  users               User[]
  employees           Employee[]
  purchaseRequests    PurchaseRequest[]
  purchaseOrders      PurchaseOrder[]
  hotelRooms          HotelRoom[]
  posTerminals        POSTerminal[]
  posOrders           POSOrder[]
  menus               Menu[]
  restaurantTables    RestaurantTable[]
  inventoryCounts     InventoryCount[]
  documentNumbering   DocumentNumbering[]
  budgets             BudgetAmount[]
  fixedAssets         FixedAsset[]
  roomInventories     RoomInventory[]
  maintenanceRequests MaintenanceRequest[]
  hotelBookings       HotelBooking[]
  goodsReceipts       GoodsReceipt[]
  stockTransfers      StockTransfer[]
  posReturns          POSReturn[]
  arInvoices          ARInvoice[]
  apInvoices          APInvoice[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isActive  Boolean   @default(true)

  // Indexes for performance
  @@index([code])
  @@index([isActive])
  @@map("business_units")
}

model User {
  id             String     @id @default(cuid())
  email          String     @unique
  name           String
  passwordHash   String // Better naming
  status         UserStatus @default(ACTIVE)
  businessUnitId String

  // Relationships
  businessUnit     BusinessUnit      @relation(fields: [businessUnitId], references: [id])
  employee         Employee?
  auditLogs        AuditLog[]
  approvalStages   ApprovalStage[]   @relation("StageApprovers")
  approvalRequests ApprovalRequest[]
  posShifts        POSShift[]
  roles            UserRole[]
  notifications    Notification[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Indexes
  @@index([email])
  @@index([businessUnitId])
  @@index([status])
  @@map("users")
}

// =================================================================
// AUDIT & SECURITY
// =================================================================
model AuditLog {
  id            String   @id @default(cuid())
  userId        String
  tableName     String // Better naming than modelName
  recordId      String
  action        String // CREATE, UPDATE, DELETE
  changedFields Json?
  ipAddress     String?
  userAgent     String?
  timestamp     DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  // Indexes for audit queries
  @@index([userId])
  @@index([tableName])
  @@index([timestamp])
  @@index([action])
  @@map("audit_logs")
}

// =================================================================
// RBAC - Role Based Access Control
// =================================================================
model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  isSystem    Boolean @default(false) // System roles can't be deleted

  permissions RolePermission[]
  users       UserRole[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isActive  Boolean   @default(true)

  @@index([name])
  @@index([isActive])
  @@map("roles")
}

model Permission {
  id       String @id @default(cuid())
  module   String // "POS", "Inventory", "Accounting", "Hotel"
  action   String // "CREATE", "READ", "UPDATE", "DELETE", "APPROVE"
  resource String // Specific resource within module

  roles RolePermission[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([module, action, resource])
  @@index([module])
  @@map("permissions")
}

model RolePermission {
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([userId, roleId])
  @@map("user_roles")
}

// =================================================================
// BUSINESS PARTNERS - Improved structure
// =================================================================
model BusinessPartner {
  id        String      @id @default(cuid())
  code      String      @unique // Better naming than cardCode
  name      String // Better naming than cardName
  type      PartnerType
  groupCode String?
  email     String?
  phone     String?
  balance   Decimal     @default(0) @db.Decimal(15, 2) // Better precision

  // Relationships
  addresses             BusinessPartnerAddress[]
  purchaseRequests      PurchaseRequest[]
  purchaseOrders        PurchaseOrder[]
  arInvoices            ARInvoice[]
  apInvoices            APInvoice[]
  hotelBookings         HotelBooking[]
  posOrders             POSOrder[]
  opportunities         Opportunity[]
  activities            Activity[]
  customerCredit        CustomerCredit?
  guestPreferences      GuestPreference[]
  guestHistory          GuestHistory[]
  guestLoyalty          GuestLoyalty?
  groupBookings         GroupBooking[]
  itemReorderPoints     ItemReorderPoint[]
  goodsReceipts         GoodsReceipt[]
  waitlists             Waitlist[]
  roomBlocks            RoomBlock[]
  corporateRates        CorporateRate[]          @relation("CorporateRates")
  agentCommissions      TravelAgentCommission[]  @relation("AgentCommissions")
  walkInGuests          WalkInGuest[]
  customerPaymentTerms  PaymentTerm?             @relation("CustomerPaymentTerms", fields: [customerPaymentTermId], references: [id])
  supplierPaymentTerms  PaymentTerm?             @relation("SupplierPaymentTerms", fields: [supplierPaymentTermId], references: [id])
  customerPaymentTermId String?
  supplierPaymentTermId String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isActive  Boolean   @default(true)

  // Indexes
  @@index([code])
  @@index([type])
  @@index([email])
  @@index([isActive])
  @@map("business_partners")
}

model BusinessPartnerAddress {
  id                String  @id @default(cuid())
  name              String
  street            String?
  city              String?
  zipCode           String?
  country           String
  type              String // 'BILLING' or 'SHIPPING'
  businessPartnerId String
  isDefault         Boolean @default(false)

  businessPartner BusinessPartner @relation(fields: [businessPartnerId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([businessPartnerId])
  @@index([type])
  @@map("business_partner_addresses")
}

// =================================================================
// ACCOUNTING SYSTEM - Complete Implementation
// =================================================================

// Chart of Accounts
model Account {
  id               String  @id @default(cuid())
  code             String  @unique
  name             String
  type             String // ASSET, LIABILITY, EQUITY, REVENUE, EXPENSE
  subType          String // CURRENT_ASSET, FIXED_ASSET, etc.
  parentAccountId  String?
  level            Int     @default(1)
  isControlAccount Boolean @default(false)
  balance          Decimal @default(0) @db.Decimal(15, 2)

  parentAccount  Account?           @relation("AccountHierarchy", fields: [parentAccountId], references: [id])
  childAccounts  Account[]          @relation("AccountHierarchy")
  journalEntries JournalEntryLine[]
  budgetAmounts  BudgetAmount[]
  bankAccounts   BankAccount[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  @@index([code])
  @@index([type])
  @@index([parentAccountId])
  @@map("accounts")
}

// General Ledger
model JournalEntry {
  id          String   @id @default(cuid())
  number      String   @unique
  date        DateTime @default(now())
  reference   String?
  description String
  totalDebit  Decimal  @db.Decimal(15, 2)
  totalCredit Decimal  @db.Decimal(15, 2)
  status      String   @default("DRAFT") // DRAFT, POSTED, REVERSED
  periodId    String

  lines  JournalEntryLine[]
  period FinancialPeriod    @relation(fields: [periodId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([number])
  @@index([date])
  @@index([status])
  @@map("journal_entries")
}

model JournalEntryLine {
  id             String  @id @default(cuid())
  journalEntryId String
  accountId      String
  debitAmount    Decimal @default(0) @db.Decimal(15, 2)
  creditAmount   Decimal @default(0) @db.Decimal(15, 2)
  description    String?
  costCenterId   String?

  journalEntry JournalEntry @relation(fields: [journalEntryId], references: [id])
  account      Account      @relation(fields: [accountId], references: [id])
  costCenter   CostCenter?  @relation(fields: [costCenterId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([journalEntryId])
  @@index([accountId])
  @@map("journal_entry_lines")
}

// Fiscal Periods
model FiscalYear {
  id        String   @id @default(cuid())
  name      String   @unique
  startDate DateTime
  endDate   DateTime
  status    String   @default("OPEN") // OPEN, CLOSED

  periods FinancialPeriod[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([startDate, endDate])
  @@map("fiscal_years")
}

model FinancialPeriod {
  id           String   @id @default(cuid())
  name         String
  code         String   @unique
  startDate    DateTime
  endDate      DateTime
  status       String   @default("OPEN") // OPEN, CLOSED, LOCKED
  fiscalYearId String

  fiscalYear     FiscalYear     @relation(fields: [fiscalYearId], references: [id])
  journalEntries JournalEntry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([fiscalYearId])
  @@index([startDate, endDate])
  @@map("financial_periods")
}

// Cost Centers
model CostCenter {
  id           String   @id @default(cuid())
  code         String   @unique
  name         String
  managerId    String?
  budgetAmount Decimal? @db.Decimal(15, 2)

  journalEntryLines JournalEntryLine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  @@index([code])
  @@map("cost_centers")
}

// Tax Management
model TaxGroup {
  id   String @id @default(cuid())
  code String @unique
  name String

  taxCodes TaxCode[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  @@index([code])
  @@map("tax_groups")
}

model TaxCode {
  id         String  @id @default(cuid())
  code       String  @unique
  name       String
  rate       Decimal @db.Decimal(5, 2)
  taxGroupId String

  taxGroup       TaxGroup        @relation(fields: [taxGroupId], references: [id])
  posOrderLines  POSOrderLine[]
  arInvoiceLines ARInvoiceLine[]
  apInvoiceLines APInvoiceLine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  @@index([code])
  @@map("tax_codes")
}

// Payment Terms
model PaymentTerm {
  id              String   @id @default(cuid())
  code            String   @unique
  name            String
  dueDays         Int
  discountDays    Int?
  discountPercent Decimal? @db.Decimal(5, 2)

  customers BusinessPartner[] @relation("CustomerPaymentTerms")
  suppliers BusinessPartner[] @relation("SupplierPaymentTerms")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  @@index([code])
  @@map("payment_terms")
}

// Bank Reconciliation
model BankAccount {
  id            String @id @default(cuid())
  accountNumber String @unique
  bankName      String
  accountName   String
  glAccountId   String @unique

  glAccount  Account         @relation(fields: [glAccountId], references: [id])
  statements BankStatement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  @@index([accountNumber])
  @@map("bank_accounts")
}

model BankStatement {
  id             String   @id @default(cuid())
  bankAccountId  String
  statementDate  DateTime
  openingBalance Decimal  @db.Decimal(15, 2)
  closingBalance Decimal  @db.Decimal(15, 2)

  bankAccount BankAccount         @relation(fields: [bankAccountId], references: [id])
  lines       BankStatementLine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([bankAccountId])
  @@index([statementDate])
  @@map("bank_statements")
}

model BankStatementLine {
  id              String   @id @default(cuid())
  bankStatementId String
  transactionDate DateTime
  description     String
  amount          Decimal  @db.Decimal(15, 2)
  isReconciled    Boolean  @default(false)

  bankStatement BankStatement @relation(fields: [bankStatementId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([bankStatementId])
  @@index([isReconciled])
  @@map("bank_statement_lines")
}

// =================================================================
// HOTEL MANAGEMENT - Complete Implementation
// =================================================================
model HotelRoomType {
  id           String  @id @default(cuid())
  name         String  @unique
  description  String?
  baseRate     Decimal @db.Decimal(10, 2)
  maxOccupancy Int     @default(2)

  rooms              HotelRoom[]
  ratePlans          RatePlan[]
  roomInventories    RoomInventory[]
  reservationHolds   ReservationHold[]
  waitlists          Waitlist[]
  roomBlocks         RoomBlock[]
  packageDeals       PackageDeal[]
  pricingRules       PricingRule[]
  occupancyForecasts OccupancyForecast[]
  overbookingRules   OverbookingRule[]
  corporateRates     CorporateRate[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isActive  Boolean   @default(true)

  @@index([name])
  @@index([isActive])
  @@map("hotel_room_types")
}

model HotelRoom {
  id                 String             @id @default(cuid())
  number             String
  status             RoomStatus         @default(AVAILABLE)
  housekeepingStatus HousekeepingStatus @default(CLEAN)
  businessUnitId     String
  roomTypeId         String

  businessUnit        BusinessUnit         @relation(fields: [businessUnitId], references: [id])
  roomType            HotelRoomType        @relation(fields: [roomTypeId], references: [id])
  bookings            HotelBooking[]
  housekeepingLogs    HousekeepingLog[]
  maintenanceRequests MaintenanceRequest[]
  housekeepingTasks   HousekeepingTask[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([number, businessUnitId])
  @@index([status])
  @@index([housekeepingStatus])
  @@index([businessUnitId])
  @@index([roomTypeId])
  @@map("hotel_rooms")
}

model HotelBooking {
  id               String        @id @default(cuid())
  confirmationCode String        @unique
  guestId          String
  roomId           String
  ratePlanId       String?
  packageDealId    String?
  channelId        String?
  groupBookingId   String?
  checkInDate      DateTime
  checkOutDate     DateTime
  status           BookingStatus @default(CONFIRMED)
  totalAmount      Decimal       @db.Decimal(10, 2)
  businessUnitId   String

  guest         BusinessPartner  @relation(fields: [guestId], references: [id])
  room          HotelRoom        @relation(fields: [roomId], references: [id])
  ratePlan      RatePlan?        @relation(fields: [ratePlanId], references: [id])
  packageDeal   PackageDeal?     @relation("PackageBookings", fields: [packageDealId], references: [id])
  channel       BookingChannel?  @relation("ChannelBookings", fields: [channelId], references: [id])
  groupBooking  GroupBooking?    @relation("GroupReservations", fields: [groupBookingId], references: [id])
  businessUnit  BusinessUnit     @relation(fields: [businessUnitId], references: [id])
  folio         Folio?
  deposits      BookingDeposit[]
  guestRequests GuestRequest[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([confirmationCode])
  @@index([guestId])
  @@index([roomId])
  @@index([status])
  @@index([checkInDate])
  @@index([checkOutDate])
  @@map("hotel_bookings")
}

model RatePlan {
  id         String   @id @default(cuid())
  name       String
  roomTypeId String
  startDate  DateTime
  endDate    DateTime
  rate       Decimal  @db.Decimal(10, 2)

  roomType             HotelRoomType        @relation(fields: [roomTypeId], references: [id])
  bookings             HotelBooking[]
  cancellationPolicies CancellationPolicy[]
  noShowPolicies       NoShowPolicy[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isActive  Boolean   @default(true)

  @@index([roomTypeId])
  @@index([startDate, endDate])
  @@map("rate_plans")
}

// Reservation Management
model ReservationHold {
  id         String   @id @default(cuid())
  roomTypeId String
  checkIn    DateTime
  checkOut   DateTime
  guestName  String
  phone      String?
  email      String?
  holdUntil  DateTime
  status     String   @default("ACTIVE") // ACTIVE, EXPIRED, CONVERTED

  roomType HotelRoomType @relation(fields: [roomTypeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([roomTypeId])
  @@index([holdUntil])
  @@index([status])
  @@map("reservation_holds")
}

model Waitlist {
  id         String   @id @default(cuid())
  roomTypeId String
  checkIn    DateTime
  checkOut   DateTime
  guestId    String
  priority   Int      @default(1)
  status     String   @default("ACTIVE") // ACTIVE, FULFILLED, CANCELLED

  roomType HotelRoomType   @relation(fields: [roomTypeId], references: [id])
  guest    BusinessPartner @relation(fields: [guestId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([roomTypeId])
  @@index([checkIn, checkOut])
  @@index([status])
  @@map("waitlists")
}

// Room Blocking & Group Management
model RoomBlock {
  id            String    @id @default(cuid())
  blockName     String
  roomTypeId    String
  startDate     DateTime
  endDate       DateTime
  blockedRooms  Int
  releasedRooms Int       @default(0)
  blockType     String // GROUP, MAINTENANCE, CORPORATE, EVENT
  contactId     String?
  releaseDate   DateTime?

  roomType HotelRoomType    @relation(fields: [roomTypeId], references: [id])
  contact  BusinessPartner? @relation(fields: [contactId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([roomTypeId])
  @@index([startDate, endDate])
  @@index([blockType])
  @@map("room_blocks")
}

model GroupBooking {
  id            String    @id @default(cuid())
  groupName     String
  contactId     String
  eventDate     DateTime?
  totalRooms    Int
  blockedRooms  Int
  pickedUpRooms Int       @default(0)
  groupRate     Decimal   @db.Decimal(10, 2)
  cutOffDate    DateTime

  contact      BusinessPartner @relation(fields: [contactId], references: [id])
  reservations HotelBooking[]  @relation("GroupReservations")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([contactId])
  @@index([cutOffDate])
  @@map("group_bookings")
}

// Package Deals & Promotions
model PackageDeal {
  id          String   @id @default(cuid())
  name        String
  description String?
  roomTypeId  String
  baseRate    Decimal  @db.Decimal(10, 2)
  inclusions  String[] // ["BREAKFAST", "WIFI", "PARKING"]
  validFrom   DateTime
  validTo     DateTime

  roomType HotelRoomType  @relation(fields: [roomTypeId], references: [id])
  bookings HotelBooking[] @relation("PackageBookings")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  @@index([roomTypeId])
  @@index([validFrom, validTo])
  @@map("package_deals")
}

// Dynamic Pricing & Revenue Management
model PricingRule {
  id           String   @id @default(cuid())
  roomTypeId   String
  seasonType   String // PEAK, OFF_PEAK, HOLIDAY
  dayOfWeek    String[] // ["MONDAY", "TUESDAY"]
  occupancyMin Decimal  @db.Decimal(5, 2) // Minimum occupancy to trigger
  priceAdjust  Decimal  @db.Decimal(5, 2) // Percentage adjustment
  startDate    DateTime
  endDate      DateTime

  roomType HotelRoomType @relation(fields: [roomTypeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  @@index([roomTypeId])
  @@index([startDate, endDate])
  @@map("pricing_rules")
}

model OccupancyForecast {
  id          String   @id @default(cuid())
  date        DateTime
  roomTypeId  String
  forecasted  Int
  actual      Int?
  averageRate Decimal  @db.Decimal(10, 2)

  roomType HotelRoomType @relation(fields: [roomTypeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([date, roomTypeId])
  @@index([date])
  @@map("occupancy_forecasts")
}

// Overbooking Management
model OverbookingRule {
  id             String  @id @default(cuid())
  roomTypeId     String
  maxOverbookPct Decimal @db.Decimal(5, 2) // Maximum overbooking percentage
  walkCost       Decimal @db.Decimal(10, 2) // Cost to walk a guest

  roomType HotelRoomType @relation(fields: [roomTypeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  @@index([roomTypeId])
  @@map("overbooking_rules")
}

model WalkInGuest {
  id                String   @id @default(cuid())
  guestId           String
  originalBookingId String?
  walkReason        String // OVERBOOKED, ROOM_ISSUE, UPGRADE
  compensation      Decimal? @db.Decimal(10, 2)
  alternateHotel    String?

  guest BusinessPartner @relation(fields: [guestId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([guestId])
  @@map("walk_in_guests")
}

// Cancellation & No-Show Management
model CancellationPolicy {
  id                 String  @id @default(cuid())
  ratePlanId         String
  hoursBeforeCheckIn Int
  penaltyType        String // PERCENTAGE, FIXED_AMOUNT, FIRST_NIGHT
  penaltyAmount      Decimal @db.Decimal(10, 2)

  ratePlan RatePlan @relation(fields: [ratePlanId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ratePlanId])
  @@map("cancellation_policies")
}

model NoShowPolicy {
  id            String  @id @default(cuid())
  ratePlanId    String
  cutOffTime    String // "18:00"
  penaltyType   String // FIRST_NIGHT, PERCENTAGE, FIXED_AMOUNT
  penaltyAmount Decimal @db.Decimal(10, 2)

  ratePlan RatePlan @relation(fields: [ratePlanId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ratePlanId])
  @@map("no_show_policies")
}

// Deposit Management
model BookingDeposit {
  id        String   @id @default(cuid())
  bookingId String
  amount    Decimal  @db.Decimal(15, 2)
  dueDate   DateTime
  status    String   @default("PENDING") // PENDING, PAID, OVERDUE

  booking HotelBooking @relation(fields: [bookingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([bookingId])
  @@index([dueDate])
  @@index([status])
  @@map("booking_deposits")
}

// Guest Services & Requests
model GuestRequest {
  id          String  @id @default(cuid())
  bookingId   String
  requestType String // HOUSEKEEPING, MAINTENANCE, CONCIERGE, ROOM_SERVICE
  description String
  priority    String  @default("NORMAL") // LOW, NORMAL, HIGH, URGENT
  status      String  @default("OPEN") // OPEN, IN_PROGRESS, COMPLETED, CANCELLED
  assignedTo  String?

  booking HotelBooking @relation(fields: [bookingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([bookingId])
  @@index([status])
  @@index([priority])
  @@map("guest_requests")
}

// Channel Management (OTA Integration)
model BookingChannel {
  id          String  @id @default(cuid())
  name        String  @unique // "Booking.com", "Expedia", "Direct"
  channelType String // OTA, DIRECT, GDS, CORPORATE
  commission  Decimal @default(0) @db.Decimal(5, 2)
  isActive    Boolean @default(true)

  bookings HotelBooking[] @relation("ChannelBookings")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelType])
  @@map("booking_channels")
}

// Corporate Rates & Travel Agent Management
model CorporateRate {
  id         String   @id @default(cuid())
  companyId  String
  roomTypeId String
  rate       Decimal  @db.Decimal(10, 2)
  validFrom  DateTime
  validTo    DateTime

  company  BusinessPartner @relation("CorporateRates", fields: [companyId], references: [id])
  roomType HotelRoomType   @relation(fields: [roomTypeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  @@index([companyId])
  @@index([roomTypeId])
  @@index([validFrom, validTo])
  @@map("corporate_rates")
}

model TravelAgentCommission {
  id        String   @id @default(cuid())
  agentId   String
  rate      Decimal  @db.Decimal(5, 2)
  validFrom DateTime
  validTo   DateTime

  agent BusinessPartner @relation("AgentCommissions", fields: [agentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  @@index([agentId])
  @@index([validFrom, validTo])
  @@map("travel_agent_commissions")
}

model Folio {
  id        String  @id @default(cuid())
  bookingId String  @unique
  balance   Decimal @default(0) @db.Decimal(15, 2)

  booking HotelBooking @relation(fields: [bookingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([bookingId])
  @@map("folios")
}

model RoomInventory {
  id              String   @id @default(cuid())
  roomTypeId      String
  businessUnitId  String
  date            DateTime
  totalRooms      Int
  availableRooms  Int
  blockedRooms    Int
  outOfOrderRooms Int

  roomType     HotelRoomType @relation(fields: [roomTypeId], references: [id])
  businessUnit BusinessUnit  @relation(fields: [businessUnitId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([roomTypeId, businessUnitId, date])
  @@index([date])
  @@index([businessUnitId])
  @@map("room_inventories")
}

model HousekeepingLog {
  id         String   @id @default(cuid())
  roomId     String
  employeeId String
  statusFrom String
  statusTo   String
  timestamp  DateTime @default(now())

  room     HotelRoom @relation(fields: [roomId], references: [id])
  employee Employee  @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([roomId])
  @@index([employeeId])
  @@index([timestamp])
  @@map("housekeeping_logs")
}

// Housekeeping Enhancements
model HousekeepingTask {
  id            String @id @default(cuid())
  roomId        String
  taskType      String // "CLEANING", "MAINTENANCE", "INSPECTION"
  priority      String // "LOW", "MEDIUM", "HIGH", "URGENT"
  estimatedTime Int // minutes
  actualTime    Int?
  status        String @default("PENDING") // "PENDING", "IN_PROGRESS", "COMPLETED"
  assignedToId  String

  room       HotelRoom               @relation(fields: [roomId], references: [id])
  assignedTo Employee                @relation(fields: [assignedToId], references: [id])
  checklist  HousekeepingChecklist[]

  createdAt   DateTime  @default(now())
  completedAt DateTime?
  updatedAt   DateTime? @updatedAt

  @@index([roomId])
  @@index([assignedToId])
  @@index([status])
  @@map("housekeeping_tasks")
}

model HousekeepingChecklist {
  id          String  @id @default(cuid())
  taskId      String
  item        String // "Clean bathroom", "Check minibar"
  isCompleted Boolean @default(false)
  notes       String?

  task HousekeepingTask @relation(fields: [taskId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@index([taskId])
  @@map("housekeeping_checklist")
}

// =================================================================
// INVENTORY MANAGEMENT - Complete Implementation
// =================================================================
model Item {
  id                String  @id @default(cuid())
  code              String  @unique
  name              String
  type              String  @default("INVENTORY") // INVENTORY, SERVICE, ROOM
  price             Decimal @db.Decimal(10, 2)
  cost              Decimal @default(0) @db.Decimal(10, 2)
  currency          String  @default("USD")
  procurementMethod String  @default("BUY") // BUY, MAKE
  trackingMethod    String  @default("NONE") // NONE, SERIAL, BATCH
  itemGroupId       String

  itemGroup              ItemGroup               @relation(fields: [itemGroupId], references: [id])
  itemWarehouses         ItemWarehouse[]
  purchaseRequestLines   PurchaseRequestLine[]
  purchaseOrderLines     PurchaseOrderLine[]
  posOrderLines          POSOrderLine[]
  serialNumbers          SerialNumber[]
  batchNumbers           BatchNumber[]
  stockTransactions      StockTransaction[]
  itemReorderPoints      ItemReorderPoint[]
  autoReorderSuggestions AutoReorderSuggestion[]
  goodsReceiptLines      GoodsReceiptLine[]
  stockTransferLines     StockTransferLine[]
  inventoryValuations    InventoryValuation[]
  itemExpiries           ItemExpiry[]
  wasteTracking          WasteTracking[]
  recipes                Recipe[]
  recipeIngredients      RecipeIngredient[]
  arInvoiceLines         ARInvoiceLine[]
  apInvoiceLines         APInvoiceLine[]
  posReturnLines         POSReturnLine[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  isActive  Boolean    @default(true)
  MenuItem  MenuItem[]

  @@index([code])
  @@index([name])
  @@index([type])
  @@index([itemGroupId])
  @@index([isActive])
  @@map("items")
}

model ItemGroup {
  id   String @id @default(cuid())
  name String @unique

  items Item[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isActive  Boolean   @default(true)

  @@index([name])
  @@map("item_groups")
}

model Warehouse {
  id   String @id @default(cuid())
  code String @unique
  name String

  itemWarehouses         ItemWarehouse[]
  inventoryCounts        InventoryCount[]
  stockTransactions      StockTransaction[]
  itemReorderPoints      ItemReorderPoint[]
  autoReorderSuggestions AutoReorderSuggestion[]
  stockTransfersFrom     StockTransfer[]         @relation("TransfersFrom")
  stockTransfersTo       StockTransfer[]         @relation("TransfersTo")
  inventoryValuations    InventoryValuation[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isActive  Boolean   @default(true)

  @@index([code])
  @@index([name])
  @@map("warehouses")
}

model ItemWarehouse {
  id          String  @id @default(cuid())
  onHand      Decimal @default(0) @db.Decimal(15, 4)
  committed   Decimal @default(0) @db.Decimal(15, 4)
  onOrder     Decimal @default(0) @db.Decimal(15, 4)
  avgCost     Decimal @default(0) @db.Decimal(10, 4)
  itemId      String
  warehouseId String

  item      Item      @relation(fields: [itemId], references: [id])
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([itemId, warehouseId])
  @@index([itemId])
  @@index([warehouseId])
  @@map("item_warehouses")
}

// Stock Movements
model StockTransaction {
  id              String  @id @default(cuid())
  itemId          String
  warehouseId     String
  transactionType String // IN, OUT, TRANSFER, ADJUSTMENT
  quantity        Decimal @db.Decimal(15, 4)
  unitCost        Decimal @db.Decimal(10, 4)
  totalCost       Decimal @db.Decimal(15, 2)
  referenceType   String? // PO, SALE, TRANSFER, COUNT
  referenceId     String?
  batchNumber     String?
  serialNumber    String?

  item      Item      @relation(fields: [itemId], references: [id])
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([itemId])
  @@index([warehouseId])
  @@index([transactionType])
  @@index([createdAt])
  @@map("stock_transactions")
}

// Reorder Management
model ItemReorderPoint {
  id           String  @id @default(cuid())
  itemId       String
  warehouseId  String
  minLevel     Decimal @db.Decimal(15, 4)
  maxLevel     Decimal @db.Decimal(15, 4)
  reorderQty   Decimal @db.Decimal(15, 4)
  leadTimeDays Int
  supplierId   String?

  item      Item             @relation(fields: [itemId], references: [id])
  warehouse Warehouse        @relation(fields: [warehouseId], references: [id])
  supplier  BusinessPartner? @relation(fields: [supplierId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([itemId, warehouseId])
  @@index([itemId])
  @@map("item_reorder_points")
}

model AutoReorderSuggestion {
  id            String  @id @default(cuid())
  itemId        String
  warehouseId   String
  suggestedQty  Decimal @db.Decimal(15, 4)
  estimatedCost Decimal @db.Decimal(15, 2)
  urgencyLevel  String // LOW, MEDIUM, HIGH, CRITICAL
  status        String  @default("PENDING") // PENDING, APPROVED, ORDERED, REJECTED

  item      Item      @relation(fields: [itemId], references: [id])
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([urgencyLevel])
  @@map("auto_reorder_suggestions")
}

// Goods Receipt
model GoodsReceipt {
  id              String   @id @default(cuid())
  number          String   @unique
  receiptDate     DateTime @default(now())
  purchaseOrderId String?
  supplierId      String
  totalAmount     Decimal  @db.Decimal(15, 2)
  status          String   @default("DRAFT") // DRAFT, POSTED
  businessUnitId  String

  purchaseOrder PurchaseOrder?     @relation(fields: [purchaseOrderId], references: [id])
  supplier      BusinessPartner    @relation(fields: [supplierId], references: [id])
  businessUnit  BusinessUnit       @relation(fields: [businessUnitId], references: [id])
  lines         GoodsReceiptLine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([number])
  @@index([receiptDate])
  @@index([supplierId])
  @@map("goods_receipts")
}

model GoodsReceiptLine {
  id             String    @id @default(cuid())
  goodsReceiptId String
  itemId         String
  quantity       Decimal   @db.Decimal(15, 4)
  unitCost       Decimal   @db.Decimal(10, 4)
  totalCost      Decimal   @db.Decimal(15, 2)
  batchNumber    String?
  expiryDate     DateTime?

  goodsReceipt GoodsReceipt @relation(fields: [goodsReceiptId], references: [id])
  item         Item         @relation(fields: [itemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([goodsReceiptId])
  @@index([itemId])
  @@map("goods_receipt_lines")
}

// Stock Transfers
model StockTransfer {
  id              String   @id @default(cuid())
  number          String   @unique
  transferDate    DateTime @default(now())
  fromWarehouseId String
  toWarehouseId   String
  status          String   @default("DRAFT") // DRAFT, IN_TRANSIT, RECEIVED
  businessUnitId  String

  fromWarehouse Warehouse           @relation("TransfersFrom", fields: [fromWarehouseId], references: [id])
  toWarehouse   Warehouse           @relation("TransfersTo", fields: [toWarehouseId], references: [id])
  businessUnit  BusinessUnit        @relation(fields: [businessUnitId], references: [id])
  lines         StockTransferLine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([number])
  @@index([transferDate])
  @@index([status])
  @@map("stock_transfers")
}

model StockTransferLine {
  id              String  @id @default(cuid())
  stockTransferId String
  itemId          String
  quantity        Decimal @db.Decimal(15, 4)

  stockTransfer StockTransfer @relation(fields: [stockTransferId], references: [id])
  item          Item          @relation(fields: [itemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([stockTransferId])
  @@index([itemId])
  @@map("stock_transfer_lines")
}

// Inventory Valuation
model InventoryValuation {
  id          String   @id @default(cuid())
  itemId      String
  warehouseId String
  method      String // FIFO, LIFO, AVERAGE, STANDARD
  unitCost    Decimal  @db.Decimal(10, 4)
  totalValue  Decimal  @db.Decimal(15, 2)
  asOfDate    DateTime

  item      Item      @relation(fields: [itemId], references: [id])
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([itemId, warehouseId, asOfDate])
  @@index([asOfDate])
  @@map("inventory_valuations")
}

// Expiry Management
model ItemExpiry {
  id         String   @id @default(cuid())
  itemId     String
  batchNo    String
  expiryDate DateTime
  quantity   Decimal  @db.Decimal(15, 4)
  location   String
  status     String   @default("ACTIVE") // ACTIVE, EXPIRED, DISPOSED

  item Item @relation(fields: [itemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([itemId])
  @@index([expiryDate])
  @@index([status])
  @@map("item_expiries")
}

// Waste Tracking
model WasteTracking {
  id         String  @id @default(cuid())
  itemId     String
  quantity   Decimal @db.Decimal(15, 4)
  reason     String // EXPIRED, DAMAGED, OVERPRODUCTION, SPILLAGE
  cost       Decimal @db.Decimal(15, 2)
  reportedBy String

  item Item @relation(fields: [itemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([itemId])
  @@index([reason])
  @@index([createdAt])
  @@map("waste_tracking")
}

// Recipe Management (for F&B)
model Recipe {
  id           String @id @default(cuid())
  menuItemId   String
  name         String
  instructions String
  prepTime     Int // minutes
  cookTime     Int // minutes
  servingSize  Int

  menuItem    Item               @relation(fields: [menuItemId], references: [id])
  ingredients RecipeIngredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([menuItemId])
  @@map("recipes")
}

model RecipeIngredient {
  id       String  @id @default(cuid())
  recipeId String
  itemId   String
  quantity Decimal @db.Decimal(15, 4)
  unit     String

  recipe Recipe @relation(fields: [recipeId], references: [id])
  item   Item   @relation(fields: [itemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([recipeId])
  @@index([itemId])
  @@map("recipe_ingredients")
}

model SerialNumber {
  id     String @id @default(cuid())
  number String @unique
  itemId String

  item Item @relation(fields: [itemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([itemId])
  @@map("serial_numbers")
}

model BatchNumber {
  id         String    @id @default(cuid())
  number     String    @unique
  itemId     String
  expiryDate DateTime?

  item Item @relation(fields: [itemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([itemId])
  @@index([expiryDate])
  @@map("batch_numbers")
}

model InventoryCount {
  id             String   @id @default(cuid())
  number         String   @unique
  countDate      DateTime @default(now())
  warehouseId    String
  businessUnitId String
  status         String   @default("OPEN")

  warehouse    Warehouse    @relation(fields: [warehouseId], references: [id])
  businessUnit BusinessUnit @relation(fields: [businessUnitId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([number])
  @@index([warehouseId])
  @@index([businessUnitId])
  @@map("inventory_counts")
}

// =================================================================
// PURCHASING - Complete Implementation
// =================================================================
model PurchaseRequest {
  id             String    @id @default(cuid())
  number         String    @unique
  status         DocStatus @default(PENDING)
  requestDate    DateTime  @default(now())
  requiredDate   DateTime
  comments       String?
  businessUnitId String
  requesterId    String
  supplierId     String?
  totalAmount    Decimal   @default(0) @db.Decimal(15, 2)

  businessUnit     BusinessUnit          @relation(fields: [businessUnitId], references: [id])
  requester        Employee              @relation(fields: [requesterId], references: [id])
  supplier         BusinessPartner?      @relation(fields: [supplierId], references: [id])
  lines            PurchaseRequestLine[]
  approvalRequests ApprovalRequest[]
  purchaseOrders   PurchaseOrder[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([number])
  @@index([status])
  @@index([requestDate])
  @@index([businessUnitId])
  @@index([requesterId])
  @@index([supplierId])
  @@map("purchase_requests")
}

model PurchaseRequestLine {
  id                String  @id @default(cuid())
  purchaseRequestId String
  itemId            String
  description       String
  quantity          Decimal @db.Decimal(15, 4)
  estimatedPrice    Decimal @default(0) @db.Decimal(10, 2)
  lineTotal         Decimal @default(0) @db.Decimal(15, 2)

  purchaseRequest PurchaseRequest @relation(fields: [purchaseRequestId], references: [id], onDelete: Cascade)
  item            Item            @relation(fields: [itemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([purchaseRequestId])
  @@index([itemId])
  @@map("purchase_request_lines")
}

model PurchaseOrder {
  id                String    @id @default(cuid())
  number            String    @unique
  status            DocStatus @default(OPEN)
  orderDate         DateTime  @default(now())
  dueDate           DateTime
  totalAmount       Decimal   @db.Decimal(15, 2)
  businessUnitId    String
  supplierId        String
  purchaseRequestId String?

  businessUnit    BusinessUnit        @relation(fields: [businessUnitId], references: [id])
  supplier        BusinessPartner     @relation(fields: [supplierId], references: [id])
  purchaseRequest PurchaseRequest?    @relation(fields: [purchaseRequestId], references: [id])
  lines           PurchaseOrderLine[]
  goodsReceipts   GoodsReceipt[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([number])
  @@index([status])
  @@index([orderDate])
  @@index([businessUnitId])
  @@index([supplierId])
  @@index([purchaseRequestId])
  @@map("purchase_orders")
}

model PurchaseOrderLine {
  id              String  @id @default(cuid())
  purchaseOrderId String
  itemId          String
  description     String
  quantity        Decimal @db.Decimal(15, 4)
  unitPrice       Decimal @db.Decimal(10, 2)
  lineTotal       Decimal @db.Decimal(15, 2)

  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  item          Item          @relation(fields: [itemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([purchaseOrderId])
  @@index([itemId])
  @@map("purchase_order_lines")
}

// =================================================================
// POS SYSTEM - Complete Implementation
// =================================================================
model POSTerminal {
  id             String @id @default(cuid())
  name           String
  businessUnitId String

  businessUnit BusinessUnit @relation(fields: [businessUnitId], references: [id])
  posOrders    POSOrder[]
  shifts       POSShift[]
  cashDrawers  CashDrawer[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isActive  Boolean   @default(true)

  @@index([businessUnitId])
  @@index([isActive])
  @@map("pos_terminals")
}

model POSOrder {
  id             String    @id @default(cuid())
  number         String    @unique
  orderDate      DateTime  @default(now())
  totalBeforeTax Decimal   @db.Decimal(15, 2)
  taxAmount      Decimal   @db.Decimal(15, 2)
  totalAmount    Decimal   @db.Decimal(15, 2)
  orderType      String // DINE_IN, TAKEOUT, DELIVERY
  status         DocStatus @default(OPEN)
  businessUnitId String
  terminalId     String
  shiftId        String
  tableId        String?
  customerId     String?

  businessUnit         BusinessUnit          @relation(fields: [businessUnitId], references: [id])
  terminal             POSTerminal           @relation(fields: [terminalId], references: [id])
  shift                POSShift              @relation(fields: [shiftId], references: [id])
  table                RestaurantTable?      @relation(fields: [tableId], references: [id])
  customer             BusinessPartner?      @relation(fields: [customerId], references: [id])
  lines                POSOrderLine[]
  payments             POSPayment[]
  splits               POSOrderSplit[]
  serviceCharges       ServiceCharge[]
  voids                POSVoid[]
  kots                 KitchenOrderTicket[]
  giftCardTransactions GiftCardTransaction[]
  returns              POSReturn[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([number])
  @@index([orderDate])
  @@index([status])
  @@index([businessUnitId])
  @@index([terminalId])
  @@index([customerId])
  @@map("pos_orders")
}

model POSOrderLine {
  id          String  @id @default(cuid())
  posOrderId  String
  itemId      String
  description String
  quantity    Decimal @db.Decimal(15, 4)
  unitPrice   Decimal @db.Decimal(10, 2)
  lineTotal   Decimal @db.Decimal(15, 2)
  taxAmount   Decimal @default(0) @db.Decimal(15, 2)
  taxCodeId   String?
  promotionId String?

  posOrder      POSOrder               @relation(fields: [posOrderId], references: [id], onDelete: Cascade)
  item          Item                   @relation(fields: [itemId], references: [id])
  taxCode       TaxCode?               @relation(fields: [taxCodeId], references: [id])
  promotion     Promotion?             @relation(fields: [promotionId], references: [id])
  modifications POSOrderModification[]
  returns       POSReturnLine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([posOrderId])
  @@index([itemId])
  @@map("pos_order_lines")
}

// Kitchen Display System
model KitchenStation {
  id   String @id @default(cuid())
  name String @unique // "Grill", "Cold Station", "Dessert"

  kotItems KOTItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("kitchen_stations")
}

model KitchenOrderTicket {
  id           String @id @default(cuid())
  posOrderId   String
  ticketNumber String @unique
  status       String @default("PENDING") // PENDING, PREPARING, READY, SERVED
  priority     String @default("NORMAL") // LOW, NORMAL, HIGH, RUSH

  posOrder POSOrder  @relation(fields: [posOrderId], references: [id])
  items    KOTItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([posOrderId])
  @@map("kitchen_order_tickets")
}

model KOTItem {
  id                  String  @id @default(cuid())
  kotId               String
  posOrderLineId      String
  stationId           String
  prepTime            Int? // estimated prep time in minutes
  specialInstructions String?
  status              String  @default("PENDING")

  kot     KitchenOrderTicket @relation(fields: [kotId], references: [id])
  station KitchenStation     @relation(fields: [stationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([kotId])
  @@index([stationId])
  @@map("kot_items")
}

// Enhanced Discounts & Promotions
model Promotion {
  id         String   @id @default(cuid())
  name       String
  type       String // PERCENTAGE, FIXED_AMOUNT, BUY_X_GET_Y, HAPPY_HOUR
  value      Decimal  @db.Decimal(10, 2)
  conditions Json? // Complex promotion rules
  validFrom  DateTime
  validTo    DateTime
  isActive   Boolean  @default(true)

  posOrderLines POSOrderLine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([validFrom, validTo])
  @@index([isActive])
  @@map("promotions")
}

// Split Billing
model POSOrderSplit {
  id         String @id @default(cuid())
  posOrderId String
  splitType  String // EQUAL, BY_ITEM, BY_AMOUNT, BY_PERCENTAGE
  guestCount Int

  posOrder POSOrder          @relation(fields: [posOrderId], references: [id])
  payments POSSplitPayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([posOrderId])
  @@map("pos_order_splits")
}

model POSSplitPayment {
  id              String  @id @default(cuid())
  splitId         String
  paymentMethodId String
  amount          Decimal @db.Decimal(15, 2)
  guestNumber     Int

  split         POSOrderSplit @relation(fields: [splitId], references: [id])
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([splitId])
  @@map("pos_split_payments")
}

// Tips & Service Charges
model ServiceCharge {
  id          String  @id @default(cuid())
  posOrderId  String
  type        String // SERVICE_CHARGE, GRATUITY, DELIVERY_FEE
  rate        Decimal @db.Decimal(5, 2) // percentage
  amount      Decimal @db.Decimal(15, 2)
  isAutomatic Boolean @default(false)

  posOrder POSOrder @relation(fields: [posOrderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([posOrderId])
  @@map("service_charges")
}

// Gift Cards & Loyalty
model GiftCard {
  id            String    @id @default(cuid())
  cardNumber    String    @unique
  balance       Decimal   @db.Decimal(15, 2)
  originalValue Decimal   @db.Decimal(15, 2)
  isActive      Boolean   @default(true)
  expiryDate    DateTime?

  transactions GiftCardTransaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cardNumber])
  @@map("gift_cards")
}

model GiftCardTransaction {
  id         String  @id @default(cuid())
  giftCardId String
  posOrderId String?
  type       String // PURCHASE, REDEMPTION, REFUND
  amount     Decimal @db.Decimal(15, 2)

  giftCard GiftCard  @relation(fields: [giftCardId], references: [id])
  posOrder POSOrder? @relation(fields: [posOrderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([giftCardId])
  @@map("gift_card_transactions")
}

// Order Modifications
model POSOrderModification {
  id               String  @id @default(cuid())
  posOrderLineId   String
  modificationType String // ADD, REMOVE, SUBSTITUTE, SPECIAL_REQUEST
  description      String
  priceAdjustment  Decimal @default(0) @db.Decimal(10, 2)

  posOrderLine POSOrderLine @relation(fields: [posOrderLineId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([posOrderLineId])
  @@map("pos_order_modifications")
}

// Voids & Refunds
model POSVoid {
  id          String  @id @default(cuid())
  posOrderId  String
  lineId      String?
  reason      String
  amount      Decimal @db.Decimal(15, 2)
  voidedBy    String
  managerAuth String? // Manager authorization

  posOrder POSOrder @relation(fields: [posOrderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([posOrderId])
  @@map("pos_voids")
}

model CashDrawer {
  id            String    @id @default(cuid())
  terminalId    String
  openAmount    Decimal   @db.Decimal(15, 2)
  currentAmount Decimal   @db.Decimal(15, 2)
  lastCounted   DateTime?

  terminal     POSTerminal       @relation(fields: [terminalId], references: [id])
  transactions CashTransaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([terminalId])
  @@map("cash_drawers")
}

model CashTransaction {
  id           String  @id @default(cuid())
  cashDrawerId String
  type         String // "SALE", "REFUND", "PAYOUT", "DROP"
  amount       Decimal @db.Decimal(15, 2)
  reason       String?
  userId       String

  cashDrawer CashDrawer @relation(fields: [cashDrawerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cashDrawerId])
  @@map("cash_transactions")
}

model POSReturn {
  id             String   @id @default(cuid())
  number         String   @unique
  returnDate     DateTime @default(now())
  businessUnitId String
  baseOrderId    String
  totalAmount    Decimal  @db.Decimal(15, 2)

  businessUnit BusinessUnit    @relation(fields: [businessUnitId], references: [id])
  baseOrder    POSOrder        @relation(fields: [baseOrderId], references: [id])
  lines        POSReturnLine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([number])
  @@index([baseOrderId])
  @@map("pos_returns")
}

model POSReturnLine {
  id              String  @id @default(cuid())
  posReturnId     String
  itemId          String
  quantity        Decimal @db.Decimal(15, 4)
  baseOrderLineId String
  unitPrice       Decimal @db.Decimal(10, 2)
  lineTotal       Decimal @db.Decimal(15, 2)

  posReturn     POSReturn    @relation(fields: [posReturnId], references: [id])
  item          Item         @relation(fields: [itemId], references: [id])
  baseOrderLine POSOrderLine @relation(fields: [baseOrderLineId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([posReturnId])
  @@index([itemId])
  @@map("pos_return_lines")
}

model Menu {
  id             String @id @default(cuid())
  name           String
  businessUnitId String

  businessUnit BusinessUnit @relation(fields: [businessUnitId], references: [id])
  menuItems    MenuItem[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isActive  Boolean   @default(true)

  @@index([businessUnitId])
  @@map("menus")
}

model MenuItem {
  id       String  @id @default(cuid())
  menuId   String
  itemId   String
  position Int     @default(0)
  isActive Boolean @default(true)

  menu Menu @relation(fields: [menuId], references: [id])
  item Item @relation(fields: [itemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([menuId, itemId])
  @@index([menuId])
  @@index([itemId])
  @@map("menu_items")
}

model RestaurantTable {
  id             String @id @default(cuid())
  number         String
  capacity       Int    @default(4)
  status         String @default("AVAILABLE")
  businessUnitId String

  businessUnit BusinessUnit @relation(fields: [businessUnitId], references: [id])
  posOrders    POSOrder[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isActive  Boolean   @default(true)

  @@unique([number, businessUnitId])
  @@index([status])
  @@index([businessUnitId])
  @@map("restaurant_tables")
}

model POSShift {
  id          String    @id @default(cuid())
  startAmount Decimal   @db.Decimal(10, 2)
  endAmount   Decimal?  @db.Decimal(10, 2)
  startTime   DateTime  @default(now())
  endTime     DateTime?
  status      String    @default("OPEN")
  userId      String
  terminalId  String

  user      User        @relation(fields: [userId], references: [id])
  terminal  POSTerminal @relation(fields: [terminalId], references: [id])
  posOrders POSOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([terminalId])
  @@index([status])
  @@map("pos_shifts")
}

model PaymentMethod {
  id   String @id @default(cuid())
  name String @unique
  type String // CASH, CARD, DIGITAL, ROOM_CHARGE

  posPayments   POSPayment[]
  splitPayments POSSplitPayment[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isActive  Boolean   @default(true)

  @@index([type])
  @@map("payment_methods")
}

model POSPayment {
  id              String  @id @default(cuid())
  posOrderId      String
  paymentMethodId String
  amount          Decimal @db.Decimal(15, 2)
  status          String  @default("COMPLETED")

  posOrder      POSOrder      @relation(fields: [posOrderId], references: [id])
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([posOrderId])
  @@index([paymentMethodId])
  @@map("pos_payments")
}

// =================================================================
// SALES & INVOICING
// =================================================================
model ARInvoice {
  id             String    @id @default(cuid())
  number         String    @unique
  status         DocStatus @default(OPEN)
  invoiceDate    DateTime  @default(now())
  totalAmount    Decimal   @db.Decimal(15, 2)
  businessUnitId String
  customerId     String

  businessUnit BusinessUnit    @relation(fields: [businessUnitId], references: [id])
  customer     BusinessPartner @relation(fields: [customerId], references: [id])
  lines        ARInvoiceLine[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([number])
  @@index([status])
  @@index([businessUnitId])
  @@index([customerId])
  @@map("ar_invoices")
}

model ARInvoiceLine {
  id          String  @id @default(cuid())
  arInvoiceId String
  itemId      String
  description String
  quantity    Decimal @db.Decimal(15, 4)
  unitPrice   Decimal @db.Decimal(10, 2)
  lineTotal   Decimal @db.Decimal(15, 2)
  taxCodeId   String?
  taxAmount   Decimal @default(0) @db.Decimal(15, 2)

  arInvoice ARInvoice @relation(fields: [arInvoiceId], references: [id], onDelete: Cascade)
  item      Item      @relation(fields: [itemId], references: [id])
  taxCode   TaxCode?  @relation(fields: [taxCodeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([arInvoiceId])
  @@index([itemId])
  @@map("ar_invoice_lines")
}

model APInvoice {
  id             String    @id @default(cuid())
  number         String    @unique
  status         DocStatus @default(OPEN)
  invoiceDate    DateTime  @default(now())
  totalAmount    Decimal   @db.Decimal(15, 2)
  businessUnitId String
  supplierId     String

  businessUnit BusinessUnit    @relation(fields: [businessUnitId], references: [id])
  supplier     BusinessPartner @relation(fields: [supplierId], references: [id])
  lines        APInvoiceLine[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([number])
  @@index([status])
  @@index([businessUnitId])
  @@index([supplierId])
  @@map("ap_invoices")
}

model APInvoiceLine {
  id          String  @id @default(cuid())
  apInvoiceId String
  itemId      String
  description String
  quantity    Decimal @db.Decimal(15, 4)
  unitPrice   Decimal @db.Decimal(10, 2)
  lineTotal   Decimal @db.Decimal(15, 2)
  taxCodeId   String?
  taxAmount   Decimal @default(0) @db.Decimal(15, 2)

  apInvoice APInvoice @relation(fields: [apInvoiceId], references: [id], onDelete: Cascade)
  item      Item      @relation(fields: [itemId], references: [id])
  taxCode   TaxCode?  @relation(fields: [taxCodeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([apInvoiceId])
  @@index([itemId])
  @@map("ap_invoice_lines")
}

// =================================================================
// SUPPORTING MODELS
// =================================================================
model Employee {
  id             String  @id @default(cuid())
  firstName      String
  lastName       String
  email          String  @unique
  jobTitle       String?
  department     String?
  managerId      String?
  businessUnitId String
  userId         String? @unique

  businessUnit        BusinessUnit         @relation(fields: [businessUnitId], references: [id])
  user                User?                @relation(fields: [userId], references: [id])
  manager             Employee?            @relation("EmployeeManager", fields: [managerId], references: [id])
  subordinates        Employee[]           @relation("EmployeeManager")
  purchaseRequests    PurchaseRequest[]
  housekeepingLogs    HousekeepingLog[]
  maintenanceRequests MaintenanceRequest[]
  housekeepingTasks   HousekeepingTask[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isActive  Boolean   @default(true)

  @@index([email])
  @@index([businessUnitId])
  @@index([managerId])
  @@map("employees")
}

model DocumentNumbering {
  id             String @id @default(cuid())
  documentType   String
  seriesName     String
  prefix         String
  nextNumber     Int
  businessUnitId String

  businessUnit BusinessUnit @relation(fields: [businessUnitId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([documentType, businessUnitId])
  @@index([documentType])
  @@map("document_numbering")
}

model BudgetAmount {
  id             String  @id @default(cuid())
  amount         Decimal @db.Decimal(15, 2)
  businessUnitId String
  accountId      String

  businessUnit BusinessUnit @relation(fields: [businessUnitId], references: [id])
  account      Account      @relation(fields: [accountId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessUnitId])
  @@index([accountId])
  @@map("budget_amounts")
}

model FixedAsset {
  id             String @id @default(cuid())
  code           String @unique
  description    String
  businessUnitId String

  businessUnit        BusinessUnit         @relation(fields: [businessUnitId], references: [id])
  maintenanceRequests MaintenanceRequest[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isActive  Boolean   @default(true)

  @@index([code])
  @@index([businessUnitId])
  @@map("fixed_assets")
}

model MaintenanceRequest {
  id             String  @id @default(cuid())
  number         String  @unique
  description    String
  priority       String  @default("MEDIUM")
  status         String  @default("OPEN")
  roomId         String?
  assetId        String?
  requesterId    String
  businessUnitId String

  room         HotelRoom?   @relation(fields: [roomId], references: [id])
  asset        FixedAsset?  @relation(fields: [assetId], references: [id])
  requester    Employee     @relation(fields: [requesterId], references: [id])
  businessUnit BusinessUnit @relation(fields: [businessUnitId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([number])
  @@index([status])
  @@index([priority])
  @@index([businessUnitId])
  @@map("maintenance_requests")
}

// =================================================================
// CRM & GUEST MANAGEMENT
// =================================================================
model Opportunity {
  id                String  @id @default(cuid())
  name              String
  businessPartnerId String
  potentialAmount   Decimal @db.Decimal(15, 2)
  stage             String

  businessPartner BusinessPartner @relation(fields: [businessPartnerId], references: [id])
  activities      Activity[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([businessPartnerId])
  @@map("opportunities")
}

model Activity {
  id                String  @id @default(cuid())
  type              String
  subject           String
  businessPartnerId String
  opportunityId     String?

  businessPartner BusinessPartner @relation(fields: [businessPartnerId], references: [id])
  opportunity     Opportunity?    @relation(fields: [opportunityId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([businessPartnerId])
  @@map("activities")
}

model GuestPreference {
  id         String @id @default(cuid())
  guestId    String
  category   String
  preference String

  guest BusinessPartner @relation(fields: [guestId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([guestId])
  @@map("guest_preferences")
}

model GuestHistory {
  id         String   @id @default(cuid())
  guestId    String
  visitDate  DateTime
  totalSpent Decimal  @db.Decimal(15, 2)

  guest BusinessPartner @relation(fields: [guestId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([guestId])
  @@index([visitDate])
  @@map("guest_history")
}

model GuestLoyalty {
  id            String @id @default(cuid())
  guestId       String @unique
  currentPoints Int    @default(0)
  totalEarned   Int    @default(0)

  guest BusinessPartner @relation(fields: [guestId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([guestId])
  @@map("guest_loyalty")
}

model CustomerCredit {
  id             String  @id @default(cuid())
  customerId     String  @unique
  creditLimit    Decimal @db.Decimal(15, 2)
  currentBalance Decimal @default(0) @db.Decimal(15, 2)

  customer BusinessPartner @relation(fields: [customerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customerId])
  @@map("customer_credit")
}

model Notification {
  id      String  @id @default(cuid())
  userId  String
  title   String
  message String
  type    String
  isRead  Boolean @default(false)

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([isRead])
  @@map("notifications")
}

model ApprovalStage {
  id         String @id @default(cuid())
  name       String
  level      Int
  templateId String

  approvers        User[]            @relation("StageApprovers")
  approvalRequests ApprovalRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([templateId])
  @@map("approval_stages")
}

model ApprovalRequest {
  id           String    @id @default(cuid())
  documentType String
  documentId   String
  stageId      String
  status       DocStatus @default(PENDING)
  approverId   String

  stage           ApprovalStage    @relation(fields: [stageId], references: [id])
  approver        User             @relation(fields: [approverId], references: [id])
  purchaseRequest PurchaseRequest? @relation(fields: [documentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([documentType, documentId])
  @@index([status])
  @@map("approval_requests")
}
